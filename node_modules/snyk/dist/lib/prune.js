"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pruneGraph = exports.countPathsToGraphRoot = void 0;
const _debug = require("debug");
const dep_graph_1 = require("@snyk/dep-graph");
const config = require("./config");
const errors_1 = require("./errors");
const debug = _debug('snyk:prune');
const { depTreeToGraph, graphToDepTree } = dep_graph_1.legacy;
function countPathsToGraphRoot(graph) {
    return graph
        .getPkgs()
        .reduce((acc, pkg) => acc + graph.countPathsToRoot(pkg), 0);
}
exports.countPathsToGraphRoot = countPathsToGraphRoot;
async function pruneGraph(depGraph, packageManager) {
    try {
        // Arbitrary threshold for maximum number of elements in the tree
        const threshold = config.PRUNE_DEPS_THRESHOLD;
        const prunedTree = (await graphToDepTree(depGraph, packageManager, {
            deduplicateWithinTopLevelDeps: true,
        }));
        const prunedGraph = await depTreeToGraph(prunedTree, packageManager);
        const count = countPathsToGraphRoot(prunedGraph);
        debug('prunedPathsCount: ' + count);
        if (count < threshold) {
            return prunedGraph;
        }
        debug('Too many vulnerable paths to process the project');
        throw new errors_1.TooManyVulnPaths();
    }
    catch (e) {
        debug('Failed to prune the graph, returning original: ' + e);
        return depGraph;
    }
}
exports.pruneGraph = pruneGraph;
//# sourceMappingURL=prune.js.map