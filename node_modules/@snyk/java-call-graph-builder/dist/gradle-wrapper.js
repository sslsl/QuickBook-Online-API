"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCallGraphGradle = exports.getGradleCommand = exports.getGradleCommandArgs = void 0;
const tslib_1 = require("tslib");
require("source-map-support/register");
const sub_process_1 = require("./sub-process");
const path = require("path");
const fs = require("fs");
function getGradleCommandArgs(targetPath) {
    const gradleArgs = [
        'printClasspath',
        '-I',
        path.join(__dirname, '../bin/init.gradle'),
        '-q',
    ];
    if (targetPath) {
        gradleArgs.push('-p', targetPath);
    }
    return gradleArgs;
}
exports.getGradleCommandArgs = getGradleCommandArgs;
function getGradleCommand(targetPath) {
    const pathToWrapper = path.resolve(targetPath || '', './gradlew');
    if (fs.existsSync(pathToWrapper)) {
        return pathToWrapper;
    }
    return 'gradle';
}
exports.getGradleCommand = getGradleCommand;
function runGradleCommand(gradleCommand, gradleCommandArgs, targetPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return sub_process_1.execute('gradle', gradleCommandArgs, { cwd: targetPath });
    });
}
function getCallGraphGradle(targetPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const gradleCommandArgs = getGradleCommandArgs(targetPath);
        const gradleCommand = getGradleCommand(targetPath);
        try {
            const gradleOutput = yield runGradleCommand(gradleCommand, gradleCommandArgs, targetPath);
            return gradleOutput.trim();
        }
        catch (e) {
            throw new Error(`gradle command '${gradleCommand} ${gradleCommandArgs.join(' ')} failed with error: ${e}`);
        }
    });
}
exports.getCallGraphGradle = getCallGraphGradle;
//# sourceMappingURL=gradle-wrapper.js.map